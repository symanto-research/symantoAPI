# Para obtener los proyectos del management platform.

library(httr)
library(jsonlite)

token <- "eyJhbGciOiJSUzI1NiIsImtpZCI6IjcyYmQyZTFjZjI5NmE0ZjAzOTM5MTQ3MGM1YzFjMTA3IiwidHlwIjoiSldUIn0.eyJuYmYiOjE1ODA3NDE3MTEsImV4cCI6MTU4MDgyODExMSwiaXNzIjoiaHR0cHM6Ly9kZXYtYWNjb3VudC5zeW1hbnRvLm5ldCIsImF1ZCI6WyJodHRwczovL2Rldi1hY2NvdW50LnN5bWFudG8ubmV0L3Jlc291cmNlcyIsImNvbmZpZy1hcGkiLCJhdXRoLWFwaSIsInBpcGVsaW5lLWFwaSJdLCJjbGllbnRfaWQiOiJjb25maWctdG9vbC1kZXYiLCJzdWIiOiJlODc4MzgxZC1lZDY3LTQxNmYtYjg5NS1iZTAzOTFkNTE3MDMiLCJhdXRoX3RpbWUiOjE1ODA3NDE3MTEsImlkcCI6Ik1pY3Jvc29mdCIsIkFzcE5ldC5JZGVudGl0eS5TZWN1cml0eVN0YW1wIjoiMTRhY2RhYjUtMzdmZC00OGVlLWEwYzgtZWQ0OTNiMmZjYWE2Iiwicm9sZSI6IlN5bWFudG9Vc2VyIiwiZmVhdHVyZSI6WyJpbmxpbmUtZWRpdGluZyIsInBheW1lbnQiLCJzcy1idW5kbGUtc2VsZWN0aW9uIl0sInByZWZlcnJlZF91c2VybmFtZSI6ImZyYW5jaXNjby5yYW5nZWxAc3ltYW50by5uZXQiLCJuYW1lIjoiZnJhbmNpc2NvLnJhbmdlbEBzeW1hbnRvLm5ldCIsImVtYWlsIjpbImZyYW5jaXNjby5yYW5nZWxAc3ltYW50by5uZXQiLCJmcmFuY2lzY28ucmFuZ2VsQHN5bWFudG8ubmV0Il0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJmaXJzdF9uYW1lIjoiRnJhbmNpc2NvIE1hbnVlbCIsImxhc3RfbmFtZSI6IlJhbmdlbCBQYXJkbyIsInNjb3BlIjpbIm9wZW5pZCIsInByb2ZpbGUiLCJjb25maWctYXBpIiwiYXV0aC1hcGkiLCJwaXBlbGluZS1hcGkiXSwiYW1yIjpbImV4dGVybmFsIl19.kCMO59V1HKKsAtrO2XVsQEouH0w1d1inzn9fNEXj1jJRP2t1vs2GNMbEAFmEC2Lkwa1_usd46rZqv8PQY6TryNPPly98gjp34FS_eyp2jX9X9k0K3_hcgKJq7QnwXdaPJMARGxXTLamWl1Fk2ws7kGz7b_F8NCD7HuIfrKiOs7oqvY3fCDs0Ji7NsH2KtYbc--kY8TRZ5KISrN2aMcKDmF3n5FOQo_p9RVdd3hht5LZIzrojfRuBYAuChAHok65bEgmUOt18bEBLC_EiBcoVzRHl88WO0bpwpdTxz7GcLSHlj3bDvY-5sW3dK8OofD-iqpub7QLi_8L9bUHQvnlLyg"

LoadProjects <- function() {
    api <- "https://symanto-configuration-api-dev.azurewebsites.net/analysisprojects"

    response <- GET(api, add_headers(Authorization = paste("Bearer", token, sep = " ")))
    projects_text <- content(response, "text")
    projects_json <- fromJSON(projects_text, flatten = TRUE)
    projects <- as.data.frame(projects_json)

    return(projects)
}

LoadTermsStats <- function(projectId) {
  api <- paste("https://symanto-configuration-api-dev.azurewebsites.net/post/termsstats?analysisProjectId=", projectId, "&excludeErrorPosts=true", sep="")
  
  response <- GET(api, add_headers(Authorization = paste("Bearer", token, sep = " ")))
  terms_text <- content(response, "text")
  terms_json <- fromJSON(terms_text, flatten = TRUE)
  
  return (terms_json)
}


LoadDataStats <- function(projectId) {
  api <- paste("https://symanto-configuration-api-dev.azurewebsites.net/analysisprojects/datasourcestats?analysisProjectId=", projectId, "&excludeErrorPosts=true", sep="")
  
  response <- GET(api, add_headers(Authorization = paste("Bearer", token, sep = " ")))
  stats_text <- content(response, "text")
  stats_json <- fromJSON(stats_text, flatten = TRUE)
  
  return (stats_json)
}

LoadConfig <- function(projectId) {
  api <- paste("https://symanto-configuration-api-dev.azurewebsites.net/analysisprojects/", projectId, sep = "")
  
  response <- GET(api, add_headers(Authorization = paste("Bearer", token, sep = " ")))
  lang_text <- content(response, "text")
  lang_json <- fromJSON(lang_text, flatten = TRUE)
  
  return (lang_json)
}

projects <- LoadProjects()
projects[,"lang"] <- NA

for (row in 1:nrow(projects)) {
#row = 2
  id <- projects[row, "id"]
  prjname <- projects[row, "projectName"]
  type <- projects[row, "type"]
  terms <- LoadTermsStats(id)
  conf <- LoadConfig(id)
  Sys.sleep(1)
  
  
  if (terms$totalPosts$postsCount>0 && !is.null(conf$configuration$languages)=="TRUE" && length(conf$configuration$languages)==1) {
    lang <- conf$configuration$languages
    projects[row, "lang"] <- lang
    
    print(paste(row, id, terms$totalPosts$postsCount, prjname, lang))
    tPosts <- as.data.frame(t(data.frame(unlist(terms$totalPosts),stringsAsFactors=TRUE)))
    tSent <- as.data.frame(t(data.frame(unlist(terms$totalSentiments),stringsAsFactors=TRUE)))
    tFeat <- as.data.frame(t(data.frame(unlist(terms$totalFeatures),stringsAsFactors=TRUE)))
    tNeg <- as.data.frame(t(data.frame(unlist(terms$totalNegations),stringAsFactors=TRUE)))
    tRlx <- as.data.frame(t(data.frame(unlist(terms$totalFeatureSentiments),stringAsFactors=TRUE)))
    
    tPosts$id <- id
    tSent$id <- id
    tFeat$id <- id
    tNeg$id <- id
    tRlx$id <- id
    
    
    if (!exists("totalPosts")) {
      totalPosts <- tPosts
      totalSentiments <- tSent
      totalFeatures <- tFeat
      totalNegations <- tNeg
      totalRelex <- tRlx
    } else {
      totalPosts <- rbind(totalPosts, tPosts)
      totalSentiments <- rbind(totalSentiments, tSent)
      totalFeatures <- rbind(totalFeatures, tFeat)
      totalNegations <- rbind(totalNegations, tNeg)
      totalRelex <- rbind(totalRelex, tRlx)
    }
  }
}
  


totalPosts <- merge(totalPosts, projects, by ="id")
totalSentiments <- merge(totalSentiments, projects, by ="id")
totalFeatures <- merge(totalFeatures, projects, by ="id")
totalNegations <- merge(totalNegations, projects, by = "id")
totalRelex <- merge(totalRelex, projects, by = "id")
#totalLang <- merge(totalLang, projects, by = "id")


# write to disk
write.csv(totalPosts, file = "totalPosts.csv",row.names=FALSE)
write.csv(totalSentiments, file = "totalSentiments.csv",row.names=FALSE)
write.csv(totalFeatures, file = "totalFeatures.csv",row.names=FALSE)
write.csv(totalNegations, file = "totalNegations.csv", row.names=FALSE)
write.csv(totalRelex, file = "totalRelex.csv", row.names=FALSE)
write.csv(projects, file = "projects.csv",row.names=FALSE)



#### TEST ###########

LoadConfig <- function(projectId) {
  api <- paste("https://symanto-configuration-api-dev.azurewebsites.net/analysisprojects/", projectId, sep = "")
  response <- GET(api, add_headers(Authorization = paste("Bearer", token, sep = " ")))
  lang_text <- content(response, "text")
  lang_json <- fromJSON(lang_text, flatten = TRUE)
  #lang <- as.data.frame(lang_json)
  
  return (lang_json)
}


test <- LoadConfig(10755)
test$configuration$languages


test2 <- as.data.frame(t(data.frame(unlist(test$configuration$languages),stringsAsFactors=TRUE)))

!is.null(test$configuration$languages)



### Test 1

for (row in 1:nrow(projects)) {
  id <- projects[row, "id"]
  prjname <- projects[row, "projectName"]
  type <- projects[row, "type"]
  #if (type=="SurveySolution") {
  lang <- LoadConfig(id)
  Sys.sleep(1)
  
  if (is.list(lang$configuration$languages)=="TRUE"){
    tLang <- as.data.frame("no language")
    tLang$id <- id
  }
  
    if ((!is.null(lang$configuration$languages))=="TRUE") {
    tLang <- as.data.frame(t(data.frame(unlist(lang$configuration$languages),stringsAsFactors=TRUE)))
    
    tLang$id <- id
  } else { 
    tLang <- as.data.frame("no language")
    tLang$id <- id
  } 
}


# Test 2


for (row in 1:nrow(projects)) {
  id <- projects[row, "id"]
  prjname <- projects[row, "projectName"]
  type <- projects[row, "type"]
  #if (type=="SurveySolution") {
  lang <- LoadConfig(id)
  Sys.sleep(1)
  
  
  if (lang$configuration$languages == "ar" | lang$configuration$languages == "de" | lang$configuration$languages == "en" | lang$configuration$languages == "es" | lang$configuration$languages == "fr" | lang$configuration$languages == "it" | lang$configuration$languages == "ru" | lang$configuration$languages == "tr" | lang$configuration$languages == "zj"){
    tLang <- as.data.frame(t(data.frame(unlist(lang$configuration$languages),stringsAsFactors=TRUE)))
    
    tLang$id <- id
  } else { 
    tLang <- "no language"
    tLang$id <- id
  } 
}


is.list(test$configuration$languages)




# Test Kico
for (row in 1:nrow(projects)) {
  id <- projects[row, "id"]
  prjname <- projects[row, "projectName"]
  type <- projects[row, "type"]
  lang <- LoadConfig(id)
  Sys.sleep(1)
  
  if (!is.null(lang$configuration$languages)){
    print(paste(id, prjname, length(lang$configuration$languages), lang$configuration$languages))
  } else { 
    print(paste(id, prjname, "NO LANG"))
  } 
}





